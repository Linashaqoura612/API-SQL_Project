{
	"info": {
		"_postman_id": "715cdb89-feaa-4a00-afa6-2dcafaa329b8",
		"name": "Contacts - CRUD",
		"description": "# Description:\n\nThe Contacts resource stores and manages user contact information, including names, emails, phone numbers, and addresses. It supports full CRUD operations via these API endpoints:\n\n- `POST /contacts` → Add new contact\n    \n- `GET /contacts` → Retrieve all contacts\n    \n- `GET /contacts/:id` → Get single contact\n    \n- `PUT /contacts/:id` → Fully replace contact\n    \n- `PATCH /contacts/:id` → Partially update contact\n    \n- `DELETE /contacts/:id` → Remove contact",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44632857",
		"_collection_link": "https://api-testing-8609.postman.co/workspace/Contact-List-App---API-Testing-~a4503ba3-1199-4e98-8aae-42e13873b20b/collection/44632857-715cdb89-feaa-4a00-afa6-2dcafaa329b8?action=share&source=collection_link&creator=44632857"
	},
	"item": [
		{
			"name": "POST-Get Token",
			"item": [
				{
					"name": "get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"aya_token\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"ayaabuali2002s@gmail.com\",\r\n  \"password\": \"A!c1tuF7\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/users/login",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST - Get Token",
			"item": [
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"ahmed.Admin@gmail.com\",\r\n  \"password\": \"Ahmed123$$\"\r\n}\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/users/login",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST - Add Contact",
			"item": [
				{
					"name": "Create contact with all valid fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact firstName and lastName matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"});\r",
									"\r",
									"let requestBody = JSON.parse(pm.request.body.raw);\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"All request values match response values\", function () {\r",
									"    for (let key in requestBody) {\r",
									"        pm.expect(responseBody[key]).to.eql(requestBody[key], `${key} does not match`);\r",
									"    }\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); // Defined jsonData here\r",
									"\r",
									"pm.test(\"Validate JSON schema (data type)\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"firstName\", \"lastName\", \"birthdate\", \"email\", \"phone\",\r",
									"            \"street1\", \"street2\", \"city\", \"stateProvince\", \"postalCode\", \"country\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"birthdate\": { \"type\": \"string\", \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\" },\r",
									"            \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"            \"phone\": { \"type\": \"string\" },\r",
									"            \"street1\": { \"type\": \"string\" },\r",
									"            \"street2\": { \"type\": \"string\" },\r",
									"            \"city\": { \"type\": \"string\" },\r",
									"            \"stateProvince\": { \"type\": \"string\" },\r",
									"            \"postalCode\": { \"type\": \"string\" },\r",
									"            \"country\": { \"type\": \"string\" }\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create contact with missing firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create contact with missing lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create contact with missing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact data matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with invalid phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"abc123\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with invalid birthdate format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"28-05-1990\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create contact with all  fields empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\", \r\n    \"lastName\": \"\", \r\n    \"birthdate\": \"\", \r\n    \"email\": \"\", \r\n    \"phone\": \"\", \r\n    \"street1\": \"\",\r\n    \"street2\": \"\",\r\n    \"city\": \"\", \r\n    \"stateProvince\": \"\", \r\n    \"postalCode\": \"\",\r\n    \"country\": \"\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit only optional fields in contact creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to create contact with duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"1999-11-06\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"0101334455\", \r\n    \"street1\": \"50 Jamal N. St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"12985\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit unknown/extra fields in request body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"nickName\": \"Mr\",\r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with street address 1 as only whitespace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \" \",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with street address 1 long string (300+ characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with street address 1 special characters only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"!@#%^&%\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with city as numbers only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"123\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with state as special chars only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"$!@#%^&&\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with postal code only alphabetic characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"abc\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with postal code negative numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"-12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with long postal code (300+ numbers)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with country as numbers only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"123\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with invalid country name (nonsense)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"unknown\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SQL injection attempt in contact input fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id); // Save for use in PUT/DELETE\r",
									"});\r",
									"\r",
									"pm.test(\"Contact data matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"firstName\":\"Ahmed' OR '1'='1\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "XSS script injection in contact input fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id); // Save for use in PUT/DELETE\r",
									"});\r",
									"\r",
									"pm.test(\"Contact data matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"pm.environment.set(\"_id\", \"68800aeab9cbc800152c0a80\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"<script>alert(1)</script>\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Input firstName field with maximum allowed length (20 chars)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id); // Save for use in PUT/DELETE\r",
									"});\r",
									"\r",
									"pm.test(\"Contact data matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmedqwertyuiopasdfg\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Input lastName field exceeding maximum length (21+ chars)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elianqwertyuiopasdfgg\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Input firstName field with minimum value (1 character)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id); // Save for use in PUT/DELETE\r",
									"});\r",
									"\r",
									"pm.test(\"Contact data matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"A\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact without providing auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create contact with invalid/expired auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdkYjRjOGJjZDJmOTAwMTU3OTI0MGIiLCJpYXQiOjE3NTMyMjY4OTV9.oNm1cs-qLDSgaAlGA9J9g6tJadAL20zUKlCKRiY2WXk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send empty JSON body during creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit input firstName field containing only whitespace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \" \", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ensure contact creation response time is under 500ms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id); // Save for use in PUT/DELETE\r",
									"});\r",
									"\r",
									"pm.test(\"Contact data matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"pm.environment.set(\"_id\", \"68800aeab9cbc800152c0a80\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "- Functional Testing (Valid/Invalid)\n    \n- Security Testing\n    \n- Performance Testing"
		},
		{
			"name": "GET - Get Contact List",
			"item": [
				{
					"name": "TC_GET_001 _Verify contact list is returned with valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_002 - Verify response schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate field types and formats when present\", function () {\r",
									"    let contacts = pm.response.json();\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"\r",
									"    contacts.forEach(c => {\r",
									"        if (c._id !== undefined) pm.expect(c._id).to.be.a(\"string\");\r",
									"        if (c.firstName !== undefined) pm.expect(c.firstName).to.be.a(\"string\");\r",
									"        if (c.lastName !== undefined) pm.expect(c.lastName).to.be.a(\"string\");\r",
									"        if (c.birthdate !== undefined) pm.expect(c.birthdate).to.match(dateRegex);\r",
									"        if (c.email !== undefined) pm.expect(c.email).to.match(emailRegex);\r",
									"        if (c.phone !== undefined) pm.expect(c.phone).to.be.a(\"string\");\r",
									"        if (c.street1 !== undefined) pm.expect(c.street1).to.be.a(\"string\");\r",
									"        if (c.street2 !== undefined) pm.expect(c.street2).to.be.a(\"string\");\r",
									"        if (c.city !== undefined) pm.expect(c.city).to.be.a(\"string\");\r",
									"        if (c.stateProvince !== undefined) pm.expect(c.stateProvince).to.be.a(\"string\");\r",
									"        if (c.postalCode !== undefined) pm.expect(c.postalCode).to.be.a(\"string\");\r",
									"        if (c.country !== undefined) pm.expect(c.country).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_003 – Verify empty contact list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_004 – Verify unauthorized access returns 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 401 for missing token\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_005 (expired token test)",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "123456",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Aya AbuAli",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "audio/basic",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_006 – Verify response time is within acceptable limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_007 – Verify all expected fields are present in each contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate field types and formats when present\", function () {\r",
									"    let contacts = pm.response.json();\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"\r",
									"    contacts.forEach(c => {\r",
									"        if (c._id !== undefined) pm.expect(c._id).to.be.a(\"string\");\r",
									"        if (c.firstName !== undefined) pm.expect(c.firstName).to.be.a(\"string\");\r",
									"        if (c.lastName !== undefined) pm.expect(c.lastName).to.be.a(\"string\");\r",
									"        if (c.birthdate !== undefined) pm.expect(c.birthdate).to.match(dateRegex);\r",
									"        if (c.email !== undefined) pm.expect(c.email).to.match(emailRegex);\r",
									"        if (c.phone !== undefined) pm.expect(c.phone).to.be.a(\"string\");\r",
									"        if (c.street1 !== undefined) pm.expect(c.street1).to.be.a(\"string\");\r",
									"        if (c.street2 !== undefined) pm.expect(c.street2).to.be.a(\"string\");\r",
									"        if (c.city !== undefined) pm.expect(c.city).to.be.a(\"string\");\r",
									"        if (c.stateProvince !== undefined) pm.expect(c.stateProvince).to.be.a(\"string\");\r",
									"        if (c.postalCode !== undefined) pm.expect(c.postalCode).to.be.a(\"string\");\r",
									"        if (c.country !== undefined) pm.expect(c.country).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_008 – Verify data format for each field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate field types and formats when present\", function () {\r",
									"    let contacts = pm.response.json();\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"\r",
									"    contacts.forEach(c => {\r",
									"        if (c._id !== undefined) pm.expect(c._id).to.be.a(\"string\");\r",
									"        if (c.firstName !== undefined) pm.expect(c.firstName).to.be.a(\"string\");\r",
									"        if (c.lastName !== undefined) pm.expect(c.lastName).to.be.a(\"string\");\r",
									"        if (c.birthdate !== undefined) pm.expect(c.birthdate).to.match(dateRegex);\r",
									"        if (c.email !== undefined) pm.expect(c.email).to.match(emailRegex);\r",
									"        if (c.phone !== undefined) pm.expect(c.phone).to.be.a(\"string\");\r",
									"        if (c.street1 !== undefined) pm.expect(c.street1).to.be.a(\"string\");\r",
									"        if (c.street2 !== undefined) pm.expect(c.street2).to.be.a(\"string\");\r",
									"        if (c.city !== undefined) pm.expect(c.city).to.be.a(\"string\");\r",
									"        if (c.stateProvince !== undefined) pm.expect(c.stateProvince).to.be.a(\"string\");\r",
									"        if (c.postalCode !== undefined) pm.expect(c.postalCode).to.be.a(\"string\");\r",
									"        if (c.country !== undefined) pm.expect(c.country).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_009 – Verify duplicate contacts are not returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check for duplicate contacts by _id and email (with try-catch)\", function () {\r",
									"    try {\r",
									"        let contacts = pm.response.json();\r",
									"\r",
									"        let ids = new Set();\r",
									"        let emails = new Set();\r",
									"        let duplicates = [];\r",
									"\r",
									"        contacts.forEach((contact, index) => {\r",
									"            if (ids.has(contact._id)) {\r",
									"                duplicates.push(`Duplicate _id at index ${index}: ${contact._id}`);\r",
									"            } else {\r",
									"                ids.add(contact._id);\r",
									"            }\r",
									"\r",
									"            if (emails.has(contact.email)) {\r",
									"                duplicates.push(`Duplicate email at index ${index}: ${contact.email}`);\r",
									"            } else {\r",
									"                emails.add(contact.email);\r",
									"            }\r",
									"        });\r",
									"\r",
									"        if (duplicates.length > 0) {\r",
									"            console.warn(\"Duplicates found:\", duplicates);\r",
									"        }\r",
									"\r",
									"        // Assertion with message\r",
									"        pm.expect(duplicates.length, `Found duplicates:\\n${duplicates.join(\"\\n\")}`).to.eql(0);\r",
									"\r",
									"    } catch (error) {\r",
									"        console.error(\"❌ Error while checking duplicates:\", error.message);\r",
									"        pm.expect.fail(\"Test failed due to script error: \" + error.message);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				}
			],
			"description": "- Functional Testing (Valid/Invalid)\n    \n- Security Testing\n    \n- Performance Testing"
		},
		{
			"name": "GET - Get Contact",
			"item": [
				{
					"name": "TC_GET_SINGLE_001 – Verify specific contact returns with valid ID and token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"contact_id\", jsonData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_SINGLE_001 – Verify specific contact returns with valid ID and token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"contact_id\", jsonData._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/687db587dbc2680015041e0d",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"687db587dbc2680015041e0d"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_SINGLE_002 – Verify 404 is returned for non-existent contact ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/999999",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_SINGLE_003 – Verify 401 is returned without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_SINGLE_004 – Verify response data schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate field types and formats of single contact\", function () {\r",
									"    let contact = pm.response.json();\r",
									"\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"\r",
									"    if (contact._id !== undefined) pm.expect(contact._id).to.be.a(\"string\");\r",
									"    if (contact.firstName !== undefined) pm.expect(contact.firstName).to.be.a(\"string\");\r",
									"    if (contact.lastName !== undefined) pm.expect(contact.lastName).to.be.a(\"string\");\r",
									"    if (contact.birthdate !== undefined) pm.expect(contact.birthdate).to.match(dateRegex);\r",
									"    if (contact.email !== undefined) pm.expect(contact.email).to.match(emailRegex);\r",
									"    if (contact.phone !== undefined) pm.expect(contact.phone).to.be.a(\"string\");\r",
									"    if (contact.street1 !== undefined) pm.expect(contact.street1).to.be.a(\"string\");\r",
									"    if (contact.street2 !== undefined) pm.expect(contact.street2).to.be.a(\"string\");\r",
									"    if (contact.city !== undefined) pm.expect(contact.city).to.be.a(\"string\");\r",
									"    if (contact.stateProvince !== undefined) pm.expect(contact.stateProvince).to.be.a(\"string\");\r",
									"    if (contact.postalCode !== undefined) pm.expect(contact.postalCode).to.be.a(\"string\");\r",
									"    if (contact.country !== undefined) pm.expect(contact.country).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postalCode\": \"12345\"\r\n}"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_GET_SINGLE_005 – Verify correct data is returned for contact ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "- Functional Testing (Valid/Invalid)\n    \n- Security Testing\n    \n- Performance Testing"
		},
		{
			"name": "PUT - Update Contact",
			"item": [
				{
					"name": "Successfully update all fields of an existing contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact updated with correct fields\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"let requestBody = JSON.parse(pm.request.body.raw);\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"All request values match response values\", function () {\r",
									"    for (let key in requestBody) {\r",
									"        pm.expect(responseBody[key]).to.eql(requestBody[key], `${key} does not match`);\r",
									"    }\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); // Defined jsonData here\r",
									"\r",
									"pm.test(\"Validate JSON schema (data type)\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"firstName\", \"lastName\", \"birthdate\", \"email\", \"phone\",\r",
									"            \"street1\", \"street2\", \"city\", \"stateProvince\", \"postalCode\", \"country\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"birthdate\": { \"type\": \"string\", \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\" },\r",
									"            \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"            \"phone\": { \"type\": \"string\" },\r",
									"            \"street1\": { \"type\": \"string\" },\r",
									"            \"street2\": { \"type\": \"string\" },\r",
									"            \"city\": { \"type\": \"string\" },\r",
									"            \"stateProvince\": { \"type\": \"string\" },\r",
									"            \"postalCode\": { \"type\": \"string\" },\r",
									"            \"country\": { \"type\": \"string\" }\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update a non-existent contact ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Bad Request\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/999999",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update attempt with missing firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with wrong date format in birthdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"07-12-2001\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit empty strings in required fields during update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\", \r\n    \"lastName\": \"\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to update contact to a duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"Ahmed@free.com\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with street address 1 as only whitespace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \" \",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with long street address 2 (300 + caracteres)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with street address 1 as special characters only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"!@#$%^\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with city as numbers only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"123\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with state as special chars only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"!@#$%^&\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with postal code with alphabetic characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"abc\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with postal code with negative numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"-10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with long postal code (300+ numbers)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"100922222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222221009222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222210092222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with country as numbers only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"123\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with invalid country name (nonsense)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"NOWHERE\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SQL injection attempt in update payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo' OR '1'='1\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "XSS script injection in update input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact updated with correct fields\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"<script>alert(1)</script>\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update firstName with max field lengths (20 characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact updated with correct fields\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Joqwertyuioasdfghjkl\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update lastName with fields exceeding max allowed length (21+ characters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deepqwertyuiopasdfghj\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update without providing auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,401]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update using invalid or expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdkYjRjOGJjZDJmOTAwMTU3OTI0MGIiLCJpYXQiOjE3NTMyMzUzOTB9.SMhrbdJv5eUiUG7zFFVkRB0vtaH6gpfmnU9MMdKnJJQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update firstName with input fields containing only whitespace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \" \", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Use negative contact ID during update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/-68802aadb9cbc800152c0b54",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"-68802aadb9cbc800152c0b54"
							]
						}
					},
					"response": []
				},
				{
					"name": "Use only alphanumeric contact ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/sadfgghgfds",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"sadfgghgfds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send completely empty JSON body in update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Perform partial update (only one field firstName)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo\", \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Include special characters in name fields during update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact updated with correct fields\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Jo$\", \r\n    \"lastName\": \"Deep!\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate response time for update is within 500ms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact updated with correct fields\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\", \r\n    \"lastName\": \"Deep\", \r\n    \"birthdate\": \"2001-12-07\", \r\n    \"email\": \"john@free.rg\", \r\n    \"phone\": \"01010003567\", \r\n    \"street1\": \"J.Nasser St.\",\r\n    \"street2\": \"Apartment 30\",\r\n    \"city\": \"Cairo\", \r\n    \"stateProvince\": \"EG\", \r\n    \"postalCode\": \"10092\",\r\n    \"country\": \"Egypt\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "- Functional Testing (Valid/Invalid)\n    \n- Security Testing\n    \n- Performance Testing"
		},
		{
			"name": "PATCH - Update Contact",
			"item": [
				{
					"name": "Create contact with all valid fields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact firstName and lastName matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"});\r",
									"\r",
									"let requestBody = JSON.parse(pm.request.body.raw);\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"All request values match response values\", function () {\r",
									"    for (let key in requestBody) {\r",
									"        pm.expect(responseBody[key]).to.eql(requestBody[key], `${key} does not match`);\r",
									"    }\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); // Defined jsonData here\r",
									"\r",
									"pm.test(\"Validate JSON schema (data type)\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"firstName\", \"lastName\", \"birthdate\", \"email\", \"phone\",\r",
									"            \"street1\", \"street2\", \"city\", \"stateProvince\", \"postalCode\", \"country\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"firstName\": { \"type\": \"string\" },\r",
									"            \"lastName\": { \"type\": \"string\" },\r",
									"            \"birthdate\": { \"type\": \"string\", \"pattern\": \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\" },\r",
									"            \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"            \"phone\": { \"type\": \"string\" },\r",
									"            \"street1\": { \"type\": \"string\" },\r",
									"            \"street2\": { \"type\": \"string\" },\r",
									"            \"city\": { \"type\": \"string\" },\r",
									"            \"stateProvince\": { \"type\": \"string\" },\r",
									"            \"postalCode\": { \"type\": \"string\" },\r",
									"            \"country\": { \"type\": \"string\" }\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_001",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"pm.test(\"stateProvince field is updated\", function () {\r",
									"  pm.expect(response.stateProvince).to.eql(\"Hebron\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stateProvince\": \"Hebron\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactId}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_002",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated stateProvince\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.stateProvince).to.eql(\"Updated stateProvince\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stateProvince\": \"Gaza\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_003 – Update firstName Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"firstName is updated correctly\", () => {\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.firstName).to.eql(\"Ahd\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Ahd\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_004 – Update street1 Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"street1 is updated correctly\", () => {\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.street1).to.eql(\"old city\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"street1\": \"old city\"\r\n}"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_005 – Update city Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"city is updated correctly\", () => {\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.city).to.eql(\"Nabluse\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"city\": \"Nabluse\"\r\n}\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_006 – Update lastName",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"lastName\": \"Ghunaim\"\r\n}"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_007 – Update email field",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"aya123@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_008 – Update birthdate field",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"birthdate\": \"2001-10-01\"\r\n}"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_010 – Update postalCode field",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postalCode\": \"12345\"\r\n}"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contactid}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contactid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_011 — No token provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"unauthorized@example.com\" }\r\n\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_012 — Invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"unauthorized@example.com\" }\r\n\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_013 — Missing body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_014 — Malformed JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{ \"email\": \"aya@gmail.com }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_015 — Non-existent contact ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{ \"email\": \"aya@gmail.com\" }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/999999",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_016 — Unsupported field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 200 with field ignored\", () => {\r",
									"  pm.expect([400, 200]).to.include(pm.response.code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{ \"age\": \"23\" }\r\n\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_017 — Invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid email should return 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{ \"email\": \"aya@.com\" }\r\n\r\n\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_018 — Invalid phone format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid phone format should return 400\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{ \"phone\": \"!!!\" }\r\n\r\n\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_020 — Invalid postalCode (non-numeric)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Postal code should reject letters\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"postalCode\": \"abcde\" }\r\n\r\n\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_021 — Long string input (boundary test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Long input handled\", () => {\r",
									"  pm.expect([200, 400]).to.include(pm.response.code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"city\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_022 — Empty string value(required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty string handling\", () => {\r",
									"  pm.expect([200, 400]).to.include(pm.response.code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"country\": \"\" }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_023 — Empty string value(not required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty string handling\", () => {\r",
									"  pm.expect([200, 400]).to.include(pm.response.code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"country\": \"\" }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_024 — Special characters in street1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Special characters allowed\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"street1\": \"!@#$%^&*()\" }"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_025 — Numeric city name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Numeric city allowed\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"city\": \"123\" }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_026— Only one field update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Only lastName updated\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.lastName).to.eql(\"AbuAli\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"lastName\": \"AbuAli\" }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_027 — null field update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Null value response\", () => {\r",
									"  pm.expect([200, 400]).to.include(pm.response.code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": null }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_028 — Empty body {}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty object update\", () => {\r",
									"  pm.expect([400, 200]).to.include(pm.response.code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_PATCH_029— Update phone field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Phone field updated\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.phone).to.eql(\"pm.request.json().phone\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{aya_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"phone\": \"059828315\" }\r\n"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/{{contact_id}}",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"{{contact_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "- Functional Testing (Valid/Invalid)\n    \n- Security Testing\n    \n- Performance Testing"
		},
		{
			"name": "DELETE - Delete Contact",
			"item": [
				{
					"name": "Successfully delete an existing contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete a contact that doesn’t exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/sde1232432",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"sde1232432"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try deleting the same contact twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SQL injection attempt in contact ID during delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}; OR 1+1=1+1--;",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}; OR 1+1=1+1--;"
							]
						}
					},
					"response": []
				},
				{
					"name": "XSS attack in contact ID parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}<script>alert(1)<script>",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}<script>alert(1)<script>"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contact without providing an auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deletion with invalid/expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdkYjRjOGJjZDJmOTAwMTU3OTI0MGIiLCJpYXQiOjE3NTMyMzUzOTB9.SMhrbdJv5eUiUG7zFFVkRB0vtaH6gpfmnU9MMdKnJJQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deletion using a negative contact ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/-68804c1943fdf90015ed6cbc",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"-68804c1943fdf90015ed6cbc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deletion using only alphanumeric ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/aewqrewqrqewrqw",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"aewqrewqrqewrqw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add contact to be deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Contact ID is returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"_id\");\r",
									"    pm.environment.set(\"contactId\", jsonData._id);\r",
									"});\r",
									"\r",
									"pm.test(\"Contact data matches input\", function () {\r",
									"    var input = JSON.parse(pm.request.body.raw);\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(response.firstName).to.eql(input.firstName);\r",
									"    pm.expect(response.lastName).to.eql(input.lastName);\r",
									"    pm.expect(response.email).to.eql(input.email);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ahmed\", \r\n    \"lastName\": \"Elian\", \r\n    \"birthdate\": \"1990-05-28\", \r\n    \"email\": \"ahmed@fake.com\", \r\n    \"phone\": \"8005546755\", \r\n    \"street1\": \"1 Main St.\",\r\n    \"street2\": \"Apartment A\",\r\n    \"city\": \"Gaza\", \r\n    \"stateProvince\": \"PS\", \r\n    \"postalCode\": \"12345\",\r\n    \"country\": \"Palestine\" \r\n}"
						},
						"url": {
							"raw": "{{Contacts URL}}",
							"host": [
								"{{Contacts URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check response time for delete operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/{{contactId}}",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt to delete contact linked to other data (Other Contact account)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Bad Request\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/688272fafbb10d00157d58f0123",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"688272fafbb10d00157d58f0123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contact with trailing spaces in ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/68804 e8 ab9c bc800152 c0ba8",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"68804 e8 ab9c bc800152 c0ba8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contact using a very large number as ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/2134567864532456trewdfsdgdsahfbkjwl3qh4rj3892572914639b5798345437854f3y287g59432y8d5742923469578d622345",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"2134567864532456trewdfsdgdsahfbkjwl3qh4rj3892572914639b5798345437854f3y287g59432y8d5742923469578d622345"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attempt deletion using special characters in ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,409]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/!@#$%&^",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								"!@"
							],
							"hash": "$%&^"
						}
					},
					"response": []
				},
				{
					"name": "Try deleting contact without specifying an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"});\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Contacts URL}}/ ",
							"host": [
								"{{Contacts URL}}"
							],
							"path": [
								" "
							]
						}
					},
					"response": []
				}
			],
			"description": "- Functional Testing (Valid/Invalid)\n    \n- Security Testing\n    \n- Performance Testing"
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}